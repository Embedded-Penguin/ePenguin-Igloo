
d21test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  0001023c  2**0
                  CONTENTS
  2 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  3 .stack        00002004  2000001c  2000001c  00020000  2**0
                  ALLOC
  4 .ARM.attributes 0000002d  00000000  00000000  0001023c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00010269  2**0
                  CONTENTS, READONLY
  6 .debug_info   00000704  00000000  00000000  000102c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000024d  00000000  00000000  000109c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000177  00000000  00000000  00010c13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000040  00000000  00000000  00010d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00012994  00000000  00000000  00010dca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000881  00000000  00000000  0002375e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000938bb  00000000  00000000  00023fdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000088  00000000  00000000  000b789c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000010  00000000  00000000  000b7924  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	20 20 00 20 23 01 00 00 21 01 00 00 21 01 00 00       . #...!...!...
	...
  2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
  3c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  4c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  5c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  6c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  7c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  8c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  9c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  ac:	21 01 00 00                                         !...

000000b0 <__do_global_dtors_aux>:
  b0:	b510      	push	{r4, lr}
  b2:	4c07      	ldr	r4, [pc, #28]	; (d0 <__do_global_dtors_aux+0x20>)
  b4:	7823      	ldrb	r3, [r4, #0]
  b6:	2b00      	cmp	r3, #0
  b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
  ba:	4b06      	ldr	r3, [pc, #24]	; (d4 <__do_global_dtors_aux+0x24>)
  bc:	2b00      	cmp	r3, #0
  be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
  c0:	4805      	ldr	r0, [pc, #20]	; (d8 <__do_global_dtors_aux+0x28>)
  c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
  c4:	bf00      	nop
  c6:	2301      	movs	r3, #1
  c8:	7023      	strb	r3, [r4, #0]
  ca:	bc10      	pop	{r4}
  cc:	bc01      	pop	{r0}
  ce:	4700      	bx	r0
  d0:	20000000 	.word	0x20000000
  d4:	00000000 	.word	0x00000000
  d8:	0000023c 	.word	0x0000023c

000000dc <frame_dummy>:
  dc:	4b0a      	ldr	r3, [pc, #40]	; (108 <frame_dummy+0x2c>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4909      	ldr	r1, [pc, #36]	; (10c <frame_dummy+0x30>)
  e6:	480a      	ldr	r0, [pc, #40]	; (110 <frame_dummy+0x34>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4809      	ldr	r0, [pc, #36]	; (114 <frame_dummy+0x38>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d102      	bne.n	fa <frame_dummy+0x1e>
  f4:	bc10      	pop	{r4}
  f6:	bc01      	pop	{r0}
  f8:	4700      	bx	r0
  fa:	4b07      	ldr	r3, [pc, #28]	; (118 <frame_dummy+0x3c>)
  fc:	2b00      	cmp	r3, #0
  fe:	d0f9      	beq.n	f4 <frame_dummy+0x18>
 100:	f000 f80c 	bl	11c <frame_dummy+0x40>
 104:	e7f6      	b.n	f4 <frame_dummy+0x18>
 106:	46c0      	nop			; (mov r8, r8)
 108:	00000000 	.word	0x00000000
 10c:	20000004 	.word	0x20000004
 110:	0000023c 	.word	0x0000023c
 114:	0000023c 	.word	0x0000023c
 118:	00000000 	.word	0x00000000
 11c:	4718      	bx	r3
 11e:	46c0      	nop			; (mov r8, r8)

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 120:	e7fe      	b.n	120 <Dummy_Handler>

00000122 <Reset_Handler>:
        if (pSrc != pDest) {
 122:	480f      	ldr	r0, [pc, #60]	; (160 <Reset_Handler+0x3e>)
 124:	490f      	ldr	r1, [pc, #60]	; (164 <Reset_Handler+0x42>)
{
 126:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
 128:	4288      	cmp	r0, r1
 12a:	d004      	beq.n	136 <Reset_Handler+0x14>
 12c:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
 12e:	4c0e      	ldr	r4, [pc, #56]	; (168 <Reset_Handler+0x46>)
 130:	18ca      	adds	r2, r1, r3
 132:	42a2      	cmp	r2, r4
 134:	d30e      	bcc.n	154 <Reset_Handler+0x32>
                *pDest++ = 0;
 136:	2100      	movs	r1, #0
 138:	4b0c      	ldr	r3, [pc, #48]	; (16c <Reset_Handler+0x4a>)
        for (pDest = &_szero; pDest < &_ezero;) {
 13a:	4a0d      	ldr	r2, [pc, #52]	; (170 <Reset_Handler+0x4e>)
 13c:	4293      	cmp	r3, r2
 13e:	d30d      	bcc.n	15c <Reset_Handler+0x3a>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 140:	21ff      	movs	r1, #255	; 0xff
 142:	4b0c      	ldr	r3, [pc, #48]	; (174 <Reset_Handler+0x52>)
 144:	4a0c      	ldr	r2, [pc, #48]	; (178 <Reset_Handler+0x56>)
 146:	438b      	bics	r3, r1
 148:	6093      	str	r3, [r2, #8]
        __libc_init_array();
 14a:	f000 f83d 	bl	1c8 <__libc_init_array>
        main();
 14e:	f000 f815 	bl	17c <main>
 152:	e7fe      	b.n	152 <Reset_Handler+0x30>
                        *pDest++ = *pSrc++;
 154:	58c5      	ldr	r5, [r0, r3]
 156:	3304      	adds	r3, #4
 158:	6015      	str	r5, [r2, #0]
 15a:	e7e9      	b.n	130 <Reset_Handler+0xe>
                *pDest++ = 0;
 15c:	c302      	stmia	r3!, {r1}
 15e:	e7ed      	b.n	13c <Reset_Handler+0x1a>
 160:	0000023c 	.word	0x0000023c
 164:	20000000 	.word	0x20000000
 168:	20000000 	.word	0x20000000
 16c:	20000000 	.word	0x20000000
 170:	2000001c 	.word	0x2000001c
 174:	00000000 	.word	0x00000000
 178:	e000ed00 	.word	0xe000ed00

0000017c <main>:


void init_pin(int port, int pin)
{
    uint32_t* dir_reg = (uint32_t*)((PORT_ADDR | (port * PORT_GROUP_SIZE) | PORT_DIR_OFF));
    *dir_reg |= (1 << pin);
 17c:	2380      	movs	r3, #128	; 0x80
 17e:	4a10      	ldr	r2, [pc, #64]	; (1c0 <main+0x44>)
 180:	009b      	lsls	r3, r3, #2
 182:	6811      	ldr	r1, [r2, #0]
 184:	430b      	orrs	r3, r1
 186:	6013      	str	r3, [r2, #0]
 188:	2302      	movs	r3, #2
 18a:	4a0e      	ldr	r2, [pc, #56]	; (1c4 <main+0x48>)
 18c:	6811      	ldr	r1, [r2, #0]
 18e:	430b      	orrs	r3, r1
 190:	6013      	str	r3, [r2, #0]
{
 192:	22fa      	movs	r2, #250	; 0xfa
 194:	0052      	lsls	r2, r2, #1
 196:	2364      	movs	r3, #100	; 0x64
            asm volatile("nop");
 198:	46c0      	nop			; (mov r8, r8)
 19a:	3b01      	subs	r3, #1
        for(i=0;i<100;i++)
 19c:	2b00      	cmp	r3, #0
 19e:	d1fb      	bne.n	198 <main+0x1c>
 1a0:	3a01      	subs	r2, #1
    for(;n>0;n--)
 1a2:	2a00      	cmp	r2, #0
 1a4:	d1f7      	bne.n	196 <main+0x1a>
 1a6:	22fa      	movs	r2, #250	; 0xfa
 1a8:	0052      	lsls	r2, r2, #1
 1aa:	e006      	b.n	1ba <main+0x3e>
            asm volatile("nop");
 1ac:	46c0      	nop			; (mov r8, r8)
 1ae:	3b01      	subs	r3, #1
        for(i=0;i<100;i++)
 1b0:	2b00      	cmp	r3, #0
 1b2:	d1fb      	bne.n	1ac <main+0x30>
 1b4:	3a01      	subs	r2, #1
    for(;n>0;n--)
 1b6:	2a00      	cmp	r2, #0
 1b8:	d0eb      	beq.n	192 <main+0x16>
{
 1ba:	2364      	movs	r3, #100	; 0x64
 1bc:	e7f6      	b.n	1ac <main+0x30>
 1be:	46c0      	nop			; (mov r8, r8)
 1c0:	41004400 	.word	0x41004400
 1c4:	41004480 	.word	0x41004480

000001c8 <__libc_init_array>:
 1c8:	b570      	push	{r4, r5, r6, lr}
 1ca:	2600      	movs	r6, #0
 1cc:	4d0e      	ldr	r5, [pc, #56]	; (208 <__libc_init_array+0x40>)
 1ce:	4c0f      	ldr	r4, [pc, #60]	; (20c <__libc_init_array+0x44>)
 1d0:	1b64      	subs	r4, r4, r5
 1d2:	10a4      	asrs	r4, r4, #2
 1d4:	42a6      	cmp	r6, r4
 1d6:	d10b      	bne.n	1f0 <__libc_init_array+0x28>
 1d8:	2600      	movs	r6, #0
 1da:	f000 f81f 	bl	21c <_init>
 1de:	4d0c      	ldr	r5, [pc, #48]	; (210 <__libc_init_array+0x48>)
 1e0:	4c0c      	ldr	r4, [pc, #48]	; (214 <__libc_init_array+0x4c>)
 1e2:	1b64      	subs	r4, r4, r5
 1e4:	10a4      	asrs	r4, r4, #2
 1e6:	42a6      	cmp	r6, r4
 1e8:	d108      	bne.n	1fc <__libc_init_array+0x34>
 1ea:	bc70      	pop	{r4, r5, r6}
 1ec:	bc01      	pop	{r0}
 1ee:	4700      	bx	r0
 1f0:	00b3      	lsls	r3, r6, #2
 1f2:	58eb      	ldr	r3, [r5, r3]
 1f4:	f000 f810 	bl	218 <__libc_init_array+0x50>
 1f8:	3601      	adds	r6, #1
 1fa:	e7eb      	b.n	1d4 <__libc_init_array+0xc>
 1fc:	00b3      	lsls	r3, r6, #2
 1fe:	58eb      	ldr	r3, [r5, r3]
 200:	f000 f80a 	bl	218 <__libc_init_array+0x50>
 204:	3601      	adds	r6, #1
 206:	e7ee      	b.n	1e6 <__libc_init_array+0x1e>
 208:	00000228 	.word	0x00000228
 20c:	00000228 	.word	0x00000228
 210:	00000228 	.word	0x00000228
 214:	0000022c 	.word	0x0000022c
 218:	4718      	bx	r3
 21a:	46c0      	nop			; (mov r8, r8)

0000021c <_init>:
 21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 21e:	46c0      	nop			; (mov r8, r8)
 220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 222:	bc08      	pop	{r3}
 224:	469e      	mov	lr, r3
 226:	4770      	bx	lr

00000228 <__init_array_start>:
 228:	000000dd 	.word	0x000000dd

0000022c <_fini>:
 22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 22e:	46c0      	nop			; (mov r8, r8)
 230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 232:	bc08      	pop	{r3}
 234:	469e      	mov	lr, r3
 236:	4770      	bx	lr

00000238 <__fini_array_start>:
 238:	000000b1 	.word	0x000000b1
